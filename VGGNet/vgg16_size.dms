#for i, (name, para) in enumerate(model.state_dict().items()):

0 features.0.weight torch.Size([64, 3, 3, 3])
1 features.1.weight torch.Size([64])
2 features.1.bias torch.Size([64])
3 features.1.running_mean torch.Size([64])
4 features.1.running_var torch.Size([64])
5 features.1.num_batches_tracked torch.Size([])
6 features.3.weight torch.Size([64, 64, 3, 3])
7 features.4.weight torch.Size([64])
8 features.4.bias torch.Size([64])
9 features.4.running_mean torch.Size([64])
10 features.4.running_var torch.Size([64])
11 features.4.num_batches_tracked torch.Size([])
12 features.7.weight torch.Size([128, 64, 3, 3])
13 features.8.weight torch.Size([128])
14 features.8.bias torch.Size([128])
15 features.8.running_mean torch.Size([128])
16 features.8.running_var torch.Size([128])
17 features.8.num_batches_tracked torch.Size([])
18 features.10.weight torch.Size([128, 128, 3, 3])
19 features.11.weight torch.Size([128])
20 features.11.bias torch.Size([128])
21 features.11.running_mean torch.Size([128])
22 features.11.running_var torch.Size([128])
23 features.11.num_batches_tracked torch.Size([])
24 features.14.weight torch.Size([256, 128, 3, 3])
25 features.15.weight torch.Size([256])
26 features.15.bias torch.Size([256])
27 features.15.running_mean torch.Size([256])
28 features.15.running_var torch.Size([256])
29 features.15.num_batches_tracked torch.Size([])
30 features.17.weight torch.Size([256, 256, 3, 3])
31 features.18.weight torch.Size([256])
32 features.18.bias torch.Size([256])
33 features.18.running_mean torch.Size([256])
34 features.18.running_var torch.Size([256])
35 features.18.num_batches_tracked torch.Size([])
36 features.20.weight torch.Size([256, 256, 3, 3])
37 features.21.weight torch.Size([256])
38 features.21.bias torch.Size([256])
39 features.21.running_mean torch.Size([256])
40 features.21.running_var torch.Size([256])
41 features.21.num_batches_tracked torch.Size([])
42 features.24.weight torch.Size([512, 256, 3, 3])
43 features.25.weight torch.Size([512])
44 features.25.bias torch.Size([512])
45 features.25.running_mean torch.Size([512])
46 features.25.running_var torch.Size([512])
47 features.25.num_batches_tracked torch.Size([])
48 features.27.weight torch.Size([512, 512, 3, 3])
49 features.28.weight torch.Size([512])
50 features.28.bias torch.Size([512])
51 features.28.running_mean torch.Size([512])
52 features.28.running_var torch.Size([512])
53 features.28.num_batches_tracked torch.Size([])
54 features.30.weight torch.Size([512, 512, 3, 3])
55 features.31.weight torch.Size([512])
56 features.31.bias torch.Size([512])
57 features.31.running_mean torch.Size([512])
58 features.31.running_var torch.Size([512])
59 features.31.num_batches_tracked torch.Size([])
60 features.34.weight torch.Size([512, 512, 3, 3])
61 features.35.weight torch.Size([512])
62 features.35.bias torch.Size([512])
63 features.35.running_mean torch.Size([512])
64 features.35.running_var torch.Size([512])
65 features.35.num_batches_tracked torch.Size([])
66 features.37.weight torch.Size([512, 512, 3, 3])
67 features.38.weight torch.Size([512])
68 features.38.bias torch.Size([512])
69 features.38.running_mean torch.Size([512])
70 features.38.running_var torch.Size([512])
71 features.38.num_batches_tracked torch.Size([])
72 features.40.weight torch.Size([512, 512, 3, 3])
73 features.41.weight torch.Size([512])
74 features.41.bias torch.Size([512])
75 features.41.running_mean torch.Size([512])
76 features.41.running_var torch.Size([512])
77 features.41.num_batches_tracked torch.Size([])
78 classifier.1.weight torch.Size([4096, 512])
79 classifier.1.bias torch.Size([4096])
80 classifier.4.weight torch.Size([4096, 4096])
81 classifier.4.bias torch.Size([4096])
82 classifier.6.weight torch.Size([10, 4096])
83 classifier.6.bias torch.Size([10])

#for i, (name, para) in enumerate(model.named_parameters()):
0 features.0.weight torch.Size([64, 3, 3, 3])
1 features.1.weight torch.Size([64])
2 features.1.bias torch.Size([64])
3 features.3.weight torch.Size([64, 64, 3, 3])
4 features.4.weight torch.Size([64])
5 features.4.bias torch.Size([64])
6 features.7.weight torch.Size([128, 64, 3, 3])
7 features.8.weight torch.Size([128])
8 features.8.bias torch.Size([128])
9 features.10.weight torch.Size([128, 128, 3, 3])
10 features.11.weight torch.Size([128])
11 features.11.bias torch.Size([128])
12 features.14.weight torch.Size([256, 128, 3, 3])
13 features.15.weight torch.Size([256])
14 features.15.bias torch.Size([256])
15 features.17.weight torch.Size([256, 256, 3, 3])
16 features.18.weight torch.Size([256])
17 features.18.bias torch.Size([256])
18 features.20.weight torch.Size([256, 256, 3, 3])
19 features.21.weight torch.Size([256])
20 features.21.bias torch.Size([256])
21 features.24.weight torch.Size([512, 256, 3, 3])
22 features.25.weight torch.Size([512])
23 features.25.bias torch.Size([512])
24 features.27.weight torch.Size([512, 512, 3, 3])
25 features.28.weight torch.Size([512])
26 features.28.bias torch.Size([512])
27 features.30.weight torch.Size([512, 512, 3, 3])
28 features.31.weight torch.Size([512])
29 features.31.bias torch.Size([512])
30 features.34.weight torch.Size([512, 512, 3, 3])
31 features.35.weight torch.Size([512])
32 features.35.bias torch.Size([512])
33 features.37.weight torch.Size([512, 512, 3, 3])
34 features.38.weight torch.Size([512])
35 features.38.bias torch.Size([512])
36 features.40.weight torch.Size([512, 512, 3, 3])
37 features.41.weight torch.Size([512])
38 features.41.bias torch.Size([512])
39 classifier.1.weight torch.Size([4096, 512])
40 classifier.1.bias torch.Size([4096])
41 classifier.4.weight torch.Size([4096, 4096])
42 classifier.4.bias torch.Size([4096])
43 classifier.6.weight torch.Size([10, 4096])
44 classifier.6.bias torch.Size([10])

for layer, (name, module) in enumerate(model.features._modules.items()):

VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (36): ReLU(inplace=True)
    (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (39): ReLU(inplace=True)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=512, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=4096, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=4096, out_features=10, bias=True)
  )
)