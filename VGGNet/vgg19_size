for i, (name, para) in enumerate(model.state_dict().items()):

features.0.weight torch.Size([64, 3, 3, 3])
features.1.weight torch.Size([64])
features.1.bias torch.Size([64])
features.1.running_mean torch.Size([64])
features.1.running_var torch.Size([64])
features.1.num_batches_tracked torch.Size([])
features.3.weight torch.Size([64, 64, 3, 3])
features.4.weight torch.Size([64])
features.4.bias torch.Size([64])
features.4.running_mean torch.Size([64])
features.4.running_var torch.Size([64])
features.4.num_batches_tracked torch.Size([])
features.7.weight torch.Size([128, 64, 3, 3])
features.8.weight torch.Size([128])
features.8.bias torch.Size([128])
features.8.running_mean torch.Size([128])
features.8.running_var torch.Size([128])
features.8.num_batches_tracked torch.Size([])
features.10.weight torch.Size([128, 128, 3, 3])
features.11.weight torch.Size([128])
features.11.bias torch.Size([128])
features.11.running_mean torch.Size([128])
features.11.running_var torch.Size([128])
features.11.num_batches_tracked torch.Size([])
features.14.weight torch.Size([256, 128, 3, 3])
features.15.weight torch.Size([256])
features.15.bias torch.Size([256])
features.15.running_mean torch.Size([256])
features.15.running_var torch.Size([256])
features.15.num_batches_tracked torch.Size([])
features.17.weight torch.Size([256, 256, 3, 3])
features.18.weight torch.Size([256])
features.18.bias torch.Size([256])
features.18.running_mean torch.Size([256])
features.18.running_var torch.Size([256])
features.18.num_batches_tracked torch.Size([])
features.20.weight torch.Size([256, 256, 3, 3])
features.21.weight torch.Size([256])
features.21.bias torch.Size([256])
features.21.running_mean torch.Size([256])
features.21.running_var torch.Size([256])
features.21.num_batches_tracked torch.Size([])
features.23.weight torch.Size([256, 256, 3, 3])
features.24.weight torch.Size([256])
features.24.bias torch.Size([256])
features.24.running_mean torch.Size([256])
features.24.running_var torch.Size([256])
features.24.num_batches_tracked torch.Size([])
features.27.weight torch.Size([512, 256, 3, 3])
features.28.weight torch.Size([512])
features.28.bias torch.Size([512])
features.28.running_mean torch.Size([512])
features.28.running_var torch.Size([512])
features.28.num_batches_tracked torch.Size([])
features.30.weight torch.Size([512, 512, 3, 3])
features.31.weight torch.Size([512])
features.31.bias torch.Size([512])
features.31.running_mean torch.Size([512])
features.31.running_var torch.Size([512])
features.31.num_batches_tracked torch.Size([])
features.33.weight torch.Size([512, 512, 3, 3])
features.34.weight torch.Size([512])
features.34.bias torch.Size([512])
features.34.running_mean torch.Size([512])
features.34.running_var torch.Size([512])
features.34.num_batches_tracked torch.Size([])
features.36.weight torch.Size([512, 512, 3, 3])
features.37.weight torch.Size([512])
features.37.bias torch.Size([512])
features.37.running_mean torch.Size([512])
features.37.running_var torch.Size([512])
features.37.num_batches_tracked torch.Size([])
features.40.weight torch.Size([512, 512, 3, 3])
features.41.weight torch.Size([512])
features.41.bias torch.Size([512])
features.41.running_mean torch.Size([512])
features.41.running_var torch.Size([512])
features.41.num_batches_tracked torch.Size([])
features.43.weight torch.Size([512, 512, 3, 3])
features.44.weight torch.Size([512])
features.44.bias torch.Size([512])
features.44.running_mean torch.Size([512])
features.44.running_var torch.Size([512])
features.44.num_batches_tracked torch.Size([])
features.46.weight torch.Size([512, 512, 3, 3])
features.47.weight torch.Size([512])
features.47.bias torch.Size([512])
features.47.running_mean torch.Size([512])
features.47.running_var torch.Size([512])
features.47.num_batches_tracked torch.Size([])
features.49.weight torch.Size([512, 512, 3, 3])
features.50.weight torch.Size([512])
features.50.bias torch.Size([512])
features.50.running_mean torch.Size([512])
features.50.running_var torch.Size([512])
features.50.num_batches_tracked torch.Size([])
classifier.1.weight torch.Size([4096, 512])
classifier.1.bias torch.Size([4096])
classifier.4.weight torch.Size([4096, 4096])
classifier.4.bias torch.Size([4096])
classifier.6.weight torch.Size([10, 4096])
classifier.6.bias torch.Size([10])


for i, (name, para) in enumerate(model.named_parameters()):

features.0.weight torch.Size([64, 3, 3, 3])
features.1.weight torch.Size([64])
features.1.bias torch.Size([64])
features.3.weight torch.Size([64, 64, 3, 3])
features.4.weight torch.Size([64])
features.4.bias torch.Size([64])
features.7.weight torch.Size([128, 64, 3, 3])
features.8.weight torch.Size([128])
features.8.bias torch.Size([128])
features.10.weight torch.Size([128, 128, 3, 3])
features.11.weight torch.Size([128])
features.11.bias torch.Size([128])
features.14.weight torch.Size([256, 128, 3, 3])
features.15.weight torch.Size([256])
features.15.bias torch.Size([256])
features.17.weight torch.Size([256, 256, 3, 3])
features.18.weight torch.Size([256])
features.18.bias torch.Size([256])
features.20.weight torch.Size([256, 256, 3, 3])
features.21.weight torch.Size([256])
features.21.bias torch.Size([256])
features.23.weight torch.Size([256, 256, 3, 3])
features.24.weight torch.Size([256])
features.24.bias torch.Size([256])
features.27.weight torch.Size([512, 256, 3, 3])
features.28.weight torch.Size([512])
features.28.bias torch.Size([512])
features.30.weight torch.Size([512, 512, 3, 3])
features.31.weight torch.Size([512])
features.31.bias torch.Size([512])
features.33.weight torch.Size([512, 512, 3, 3])
features.34.weight torch.Size([512])
features.34.bias torch.Size([512])
features.36.weight torch.Size([512, 512, 3, 3])
features.37.weight torch.Size([512])
features.37.bias torch.Size([512])
features.40.weight torch.Size([512, 512, 3, 3])
features.41.weight torch.Size([512])
features.41.bias torch.Size([512])
features.43.weight torch.Size([512, 512, 3, 3])
features.44.weight torch.Size([512])
features.44.bias torch.Size([512])
features.46.weight torch.Size([512, 512, 3, 3])
features.47.weight torch.Size([512])
features.47.bias torch.Size([512])
features.49.weight torch.Size([512, 512, 3, 3])
features.50.weight torch.Size([512])
features.50.bias torch.Size([512])
classifier.1.weight torch.Size([4096, 512])
classifier.1.bias torch.Size([4096])
classifier.4.weight torch.Size([4096, 4096])
classifier.4.bias torch.Size([4096])
classifier.6.weight torch.Size([10, 4096])
classifier.6.bias torch.Size([10])



for layer, (name, module) in enumerate(model.features._modules.items()):

0 Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
1 BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
2 ReLU(inplace=True)
3 Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
4 BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
5 ReLU(inplace=True)
6 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
7 Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
8 BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
9 ReLU(inplace=True)
10 Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
11 BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
12 ReLU(inplace=True)
13 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
14 Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
15 BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
16 ReLU(inplace=True)
17 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
18 BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
19 ReLU(inplace=True)
20 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
21 BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
22 ReLU(inplace=True)
23 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
24 BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
25 ReLU(inplace=True)
26 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
27 Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
28 BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
29 ReLU(inplace=True)
30 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
31 BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
32 ReLU(inplace=True)
33 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
34 BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
35 ReLU(inplace=True)
36 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
37 BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
38 ReLU(inplace=True)
39 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
40 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
41 BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
42 ReLU(inplace=True)
43 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
44 BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
45 ReLU(inplace=True)
46 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
47 BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
48 ReLU(inplace=True)
49 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
50 BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
51 ReLU(inplace=True)
52 MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)

0 Dropout(p=0.5, inplace=False)
1 Linear(in_features=512, out_features=4096, bias=True)
2 ReLU(inplace=True)
3 Dropout(p=0.5, inplace=False)
4 Linear(in_features=4096, out_features=4096, bias=True)
5 ReLU(inplace=True)
6 Linear(in_features=4096, out_features=10, bias=True)